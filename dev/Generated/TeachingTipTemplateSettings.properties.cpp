// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "TeachingTipTemplateSettings.h"

CppWinRTActivatableClassWithDPFactory(TeachingTipTemplateSettings)

GlobalDependencyProperty TeachingTipTemplateSettingsProperties::s_BeakMarginProperty{ nullptr };
GlobalDependencyProperty TeachingTipTemplateSettingsProperties::s_TopBeakHighlightMarginProperty{ nullptr };
GlobalDependencyProperty TeachingTipTemplateSettingsProperties::s_TopLeftHighlightMarginProperty{ nullptr };
GlobalDependencyProperty TeachingTipTemplateSettingsProperties::s_TopRightHighlightMarginProperty{ nullptr };

TeachingTipTemplateSettingsProperties::TeachingTipTemplateSettingsProperties()
{
    EnsureProperties();
}

void TeachingTipTemplateSettingsProperties::EnsureProperties()
{
    if (!s_BeakMarginProperty)
    {
        s_BeakMarginProperty =
            InitializeDependencyProperty(
                L"BeakMargin",
                winrt::name_of<winrt::Thickness>(),
                winrt::name_of<winrt::TeachingTipTemplateSettings>(),
                false /* isAttached */,
                ValueHelper<winrt::Thickness>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_TopBeakHighlightMarginProperty)
    {
        s_TopBeakHighlightMarginProperty =
            InitializeDependencyProperty(
                L"TopBeakHighlightMargin",
                winrt::name_of<winrt::Thickness>(),
                winrt::name_of<winrt::TeachingTipTemplateSettings>(),
                false /* isAttached */,
                ValueHelper<winrt::Thickness>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_TopLeftHighlightMarginProperty)
    {
        s_TopLeftHighlightMarginProperty =
            InitializeDependencyProperty(
                L"TopLeftHighlightMargin",
                winrt::name_of<winrt::Thickness>(),
                winrt::name_of<winrt::TeachingTipTemplateSettings>(),
                false /* isAttached */,
                ValueHelper<winrt::Thickness>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_TopRightHighlightMarginProperty)
    {
        s_TopRightHighlightMarginProperty =
            InitializeDependencyProperty(
                L"TopRightHighlightMargin",
                winrt::name_of<winrt::Thickness>(),
                winrt::name_of<winrt::TeachingTipTemplateSettings>(),
                false /* isAttached */,
                ValueHelper<winrt::Thickness>::BoxedDefaultValue(),
                nullptr);
    }
}

void TeachingTipTemplateSettingsProperties::ClearProperties()
{
    s_BeakMarginProperty = nullptr;
    s_TopBeakHighlightMarginProperty = nullptr;
    s_TopLeftHighlightMarginProperty = nullptr;
    s_TopRightHighlightMarginProperty = nullptr;
}

void TeachingTipTemplateSettingsProperties::BeakMargin(winrt::Thickness const& value)
{
    static_cast<TeachingTipTemplateSettings*>(this)->SetValue(s_BeakMarginProperty, ValueHelper<winrt::Thickness>::BoxValueIfNecessary(value));
}

winrt::Thickness TeachingTipTemplateSettingsProperties::BeakMargin()
{
    return ValueHelper<winrt::Thickness>::CastOrUnbox(static_cast<TeachingTipTemplateSettings*>(this)->GetValue(s_BeakMarginProperty));
}

void TeachingTipTemplateSettingsProperties::TopBeakHighlightMargin(winrt::Thickness const& value)
{
    static_cast<TeachingTipTemplateSettings*>(this)->SetValue(s_TopBeakHighlightMarginProperty, ValueHelper<winrt::Thickness>::BoxValueIfNecessary(value));
}

winrt::Thickness TeachingTipTemplateSettingsProperties::TopBeakHighlightMargin()
{
    return ValueHelper<winrt::Thickness>::CastOrUnbox(static_cast<TeachingTipTemplateSettings*>(this)->GetValue(s_TopBeakHighlightMarginProperty));
}

void TeachingTipTemplateSettingsProperties::TopLeftHighlightMargin(winrt::Thickness const& value)
{
    static_cast<TeachingTipTemplateSettings*>(this)->SetValue(s_TopLeftHighlightMarginProperty, ValueHelper<winrt::Thickness>::BoxValueIfNecessary(value));
}

winrt::Thickness TeachingTipTemplateSettingsProperties::TopLeftHighlightMargin()
{
    return ValueHelper<winrt::Thickness>::CastOrUnbox(static_cast<TeachingTipTemplateSettings*>(this)->GetValue(s_TopLeftHighlightMarginProperty));
}

void TeachingTipTemplateSettingsProperties::TopRightHighlightMargin(winrt::Thickness const& value)
{
    static_cast<TeachingTipTemplateSettings*>(this)->SetValue(s_TopRightHighlightMarginProperty, ValueHelper<winrt::Thickness>::BoxValueIfNecessary(value));
}

winrt::Thickness TeachingTipTemplateSettingsProperties::TopRightHighlightMargin()
{
    return ValueHelper<winrt::Thickness>::CastOrUnbox(static_cast<TeachingTipTemplateSettings*>(this)->GetValue(s_TopRightHighlightMarginProperty));
}
